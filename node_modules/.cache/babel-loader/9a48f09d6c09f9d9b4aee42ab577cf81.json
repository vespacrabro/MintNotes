{"ast":null,"code":"var _jsxFileName = \"/Users/taniashershen/Desktop/WEB/react-notes-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport NoteList from \"./components/NotesList\";\nimport SearchBar from \"./components/SearchBar\";\nimport Header from \"./components/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [notes, setNotes] = useState([{\n    id: nanoid(),\n    text: \"Hello 1!\",\n    date: \"20/10/2022\"\n  }, {\n    id: nanoid(),\n    text: \"Hello 2!\",\n    date: \"20/10/2022\"\n  }, {\n    id: nanoid(),\n    text: \"Hello! 3\",\n    date: \"12/10/2022\"\n  }, {\n    id: nanoid(),\n    text: \"Hello 4!\",\n    date: \"10/10/2022\"\n  }]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(false);\n\n  // retrieve notes that saved in local storage when the app loads\n  // when array is empty that means it only run on a first load\n  useEffect(() => {\n    const savedNotes = JSON.parse(window.localStorage.getItem(\"mint-notes-app-data\"));\n    if (savedNotes) setNotes(savedNotes);\n  }, []);\n  // save data to a local storage with a key\n  useEffect(() => {\n    window.localStorage.setItem(\"mint-notes-app-data\", JSON.stringify(notes));\n  }, [notes]);\n  const addNote = text => {\n    const date = new Date();\n    const newNote = {\n      id: nanoid(),\n      text: text,\n      date: date.toLocaleDateString()\n    };\n    const newNotes = [...notes, newNote];\n    setNotes(newNotes);\n  };\n  const deleteNote = id => {\n    const newNotes = notes.filter(note => note.id !== id);\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${darkMode && \"dark-mode\"}`,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        handleToggleDarkMode: setDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        handleSearchNote: setSearchText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NoteList, {\n        notes: notes.filter(note => note.text.toLowerCase().includes(searchText)),\n        handleAddNote: addNote,\n        handleDeleteNote: deleteNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OoD9h7rZmotwJzz2EgNu2eP6SXE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","nanoid","NoteList","SearchBar","Header","App","notes","setNotes","id","text","date","searchText","setSearchText","darkMode","setDarkMode","savedNotes","JSON","parse","window","localStorage","getItem","setItem","stringify","addNote","Date","newNote","toLocaleDateString","newNotes","deleteNote","filter","note","toLowerCase","includes"],"sources":["/Users/taniashershen/Desktop/WEB/react-notes-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport NoteList from \"./components/NotesList\";\nimport SearchBar from \"./components/SearchBar\";\nimport Header from \"./components/Header\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([\n    { id: nanoid(), text: \"Hello 1!\", date: \"20/10/2022\" },\n    { id: nanoid(), text: \"Hello 2!\", date: \"20/10/2022\" },\n    { id: nanoid(), text: \"Hello! 3\", date: \"12/10/2022\" },\n    { id: nanoid(), text: \"Hello 4!\", date: \"10/10/2022\" },\n  ]);\n\n  const [searchText, setSearchText] = useState(\"\");\n\n  const [darkMode, setDarkMode] = useState(false);\n\n  // retrieve notes that saved in local storage when the app loads\n  // when array is empty that means it only run on a first load\n  useEffect(() => {\n    const savedNotes = JSON.parse(window.localStorage.getItem(\"mint-notes-app-data\"));\n\n    if (savedNotes) setNotes(savedNotes);\n  }, []);\n  // save data to a local storage with a key\n  useEffect(() => {\n    window.localStorage.setItem(\"mint-notes-app-data\", JSON.stringify(notes));\n  }, [notes]);\n\n  const addNote = (text) => {\n    const date = new Date();\n    const newNote = {\n      id: nanoid(),\n      text: text,\n      date: date.toLocaleDateString(),\n    };\n    const newNotes = [...notes, newNote];\n    setNotes(newNotes);\n  };\n\n  const deleteNote = (id) => {\n    const newNotes = notes.filter((note) => note.id !== id);\n    setNotes(newNotes);\n  };\n  return (\n    <div className={`${darkMode && \"dark-mode\"}`}>\n      {\" \"}\n      <div className=\"container\">\n        <Header handleToggleDarkMode={setDarkMode} />\n        <SearchBar handleSearchNote={setSearchText} />\n        <NoteList\n          notes={notes.filter((note) =>\n            note.text.toLowerCase().includes(searchText)\n          )}\n          handleAddNote={addNote}\n          handleDeleteNote={deleteNote}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}